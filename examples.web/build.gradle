buildscript {
    ext.kotlinVersion = '1.3.0'
    ext.nodePluginVersion = '1.2.0'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:$nodePluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

ext {
    kotlinxHtmlVersion = '0.6.9'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://jitpack.io' }
    maven { url 'https://plugins.gradle.org/m2/' }
}

apply plugin: 'kotlin-platform-js'
apply plugin: 'kotlin-dce-js'
apply plugin: 'com.moowork.node'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"
    compile "org.jetbrains.kotlinx:kotlinx-html-js:$kotlinxHtmlVersion"
    compile project(":cobalt.databinding")

    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlinVersion"
}

node {
    download true
}

compileKotlin2Js {
    kotlinOptions {
        metaInfo = true
        sourceMap = true
        sourceMapEmbedSources = 'always'
        moduleKind = 'umd'
    }
}

compileTestKotlin2Js {
    kotlinOptions.moduleKind = 'umd'
}

task yarnInstall(type: YarnTask) {
    args = ['install']
}

task bundle(type: YarnTask, dependsOn: [runDceKotlinJs, yarnInstall]) {
    args = ["run", "bundle"]
    assemble.dependsOn bundle
}

task copyStaticResources(type: Copy) {
    from sourceSets.main.resources
    into "${buildDir}/dist"
    bundle.dependsOn copyStaticResources
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

task run(type: YarnTask, dependsOn: [copyStaticResources, populateNodeModules, yarnInstall]) {
    args = ["run", "start"]
}

task runKarma(type: YarnTask, dependsOn: [populateNodeModules, yarnInstall]) {
    args = ['test']
    // test.dependsOn runKarma
}

